############
Sky-shifting
############

CWInPy can be used to produce :ref:`posterior probability distributions<Known pulsar parameter
estimation>` for the unknown signal parameters of a continuous gravitational-wave source, i.e., a
pulsar. These allow you to constrain, for example, the gravitational-wave amplitude, or orientation
of the source. However, before making inferences about a particular source's parameters it is useful
to be sure that the signal you are observing is actually astrophysical in origin. Gravitational-wave
detector data contains many non-astrophysical artifacts and also its properties vary over time,
i.e., the noise is the data is not drawn from a purely Gaussian `non-stationary process
<https://en.wikipedia.org/wiki/Stationary_process>`_ (see, e.g., [1]_). Some of these artifacts are
narrow-band spectral line features, which can wander across the frequency band of an expected signal
and potentially mimic a continuous signal to some extent [2]_. Even Gaussian noise can occasionally
conspire to look slightly "signal-like", i.e., produce posteriors in amplitude that peak away from
zero and have some coherent structure detectors.

It is therefore useful to have some way to assess whether a signal is likely to be a detector
artifact or not, i.e., compare some statistic generated from the data containing the signal to a
known background distribution of that statistic for realistic noise-only detector data. We
unfortunately cannot turn signals off or shield the detector from them to work out a noise-only
background. Given a continuous signal is at a specific frequency, the noise-only background could
potentially be generated by looking at many different frequencies. However, because the detector
noise amplitude is very frequency dependent and the spectral features vary across the band, this
means different frequencies are not very representative of the noise around our signal of interest.
This is where sky-shifting [3]_ comes in.

For a long-duration signal, its exact phase evolution is very dependent on its sky location, due to
the Doppler and relativistic modulations required for that location. Therefore, for a particular
source you can completely decohere the signal by :ref:`heterodyning<Heterodyning data>` it at the
wrong sky location. This process is slightly analogous to process of "time shifting" used to
establish the significance of transient gravitational-wave signals (see, e.g., Section 3.6 of [4]_).
If one performs the heterodyne with many random sky shifts and in each case then performs parameter
estimation on the signal and calculates an appropriate statistic, e.g., a coherent versus incoherent
Bayesian odds as given in Equation (32) of [5]_, then the distribution of this statistic can be
compared with that from the un-shifted sky location.

The sky-shifting process works as follows:

#. Perform a "coarse" heterodyne, i.e., heterodyne the data without accounting for any Doppler
corrections and just using terms of the Taylor expansion in the frequency evolution (this is the
first stage of the :ref:`"two-stage" heterodyne approach<Example: two stage heterodyne>`). Filter
and downsample the data, but making sure the filter is wide enough to accommodate the Doppler
modulation of the source.
#. Randomly generate a number of new sky locations in the same ecliptic
hemisphere as the source. For each of these new locations and the original location, perform an
additional heterodyne of the "coarse" data (this is the second stage of the :ref:`"two-stage"
heterodyne approach<Example: two stage heterodyne>`), using the expected Doppler modulation for that
position.
#. Perform :ref:`parameter estimation<Known pulsar parameter estimation>` on the
heterodyned data for each sky location (including the original un-shifted data) and calculate the
Bayesian odds (assuming a nested sampling algorithm has been used).
#. Histogram the distribution of sky-shifted odds values and perform a kernel density estimate to
compare that distribution to the value from the true un-shifted location.

To make this process easy, CWInPy provides the ``cwinpy_skyshift_pipeline`` script, which sets up
the full :ref:`known pulsar analysis pipeline<Known pulsar analysis pipeline>` for an individual
source. This can either take some "Quick setup" command-line arguments to run on open data with some
default settings or can take a ``cwinpy_knope_pipeline``-style :ref:`configuration
file<Configuration file>`. It will launch a HTCondor DAG for the whole process except production of
the odds distributions, which must be done manually (add link to function for this!).

Using the default settings, the pipeline will generate the following directory tree structure:

.. code-block:: bash

   skyshift
    ├── prior.txt          # file containing the prior to use for parameter estimation       
    ├── cache              # directory containing files listing the gravitational-wave data frames for each detector
    ├── configs            # directory containing all the configuration files for cwinpy_heterodyne and cwinpy_pe
    ├── log                # directory containing all the HTCondor job log files
    ├── pulsars            # directory containing pulsar parameter (.par) files for each sky-shifted location
    ├── results            # directory containing the parameter estimation output for each source
    |    ├── pulsar1       # directory containing the parameter estimation output for the first location
    |    ├── pulsar2       # directory containing the parameter estimation output for the second location
    |    └── ...
    ├── segments           # directory containing the data science segments to use for each pulsar
    ├── stage1             # directory containing the output of the first stage heterodyne for each detector
    |    ├── detector1     # directory containing the output of the first stage heterodyne for first detector
    |    ├── detector2     # directory containing the output of the first stage heterodyne for second detector
    |    └── ...
    ├── stage2             # directory containing the output of the second stage heterodyne for each detector and source location
    |    ├── detector1     # directory containing the output of the second stage heterodyne for first detector
    |    ├── detector2     # directory containing the output of the second stage heterodyne for second detector
    |    └── ...
    └── submit             # directory containing the HTCondor DAG file and submit files

Example
=======

An easy way to test the sky-shifting analysis is by looking at one of the hardware injection
signals. The ``cwinpy_skyshift_pipeline`` script below set up the analysis to run on O1 data for the
``PULSAR03`` injection with 500 sky-shifts. By default this will run with both the LIGO detectors,
H1 and L1, with parameter estimation performed both coherently with both detectors and on each of
the individual detectors.

.. code-block:: bash

   cwinpy_skyshift_pipeline --run O1 --pulsar PULSAR03 --nshifts 500 --accounting-group-tag aluk.dev.o1.cw.targeted.bayesian

.. note::

   After the pipeline completes, there will be many "resume" file that can take up a lot of space. It is worth moving into the ``results`` directory and deleting these, e.g.:

   .. code-block::

      rm */*.pickle

Sky-shifting references
=======================

.. [1] `D. Davis *et al*
    <https://ui.adsabs.harvard.edu/abs/2021CQGra..38m5014D/abstract>`_, *CQG*, **38**, 135014 (2021).

.. [2] `P. Covas *et al*
    <https://ui.adsabs.harvard.edu/abs/2018PhRvD..97h2002C/abstract>`_, *PRD*, **97**, 082002 (2018).

.. [3] `M. Isi, S. Mastrogiovanni, M. Pitkin & O. J. Piccinni
    <https://ui.adsabs.harvard.edu/abs/2020PhRvD.102l3027I/abstract>`_, *PRD*, **102**, 123027 (2020).

.. [4] `S. A. Usman *et al*
    <https://ui.adsabs.harvard.edu/abs/2016CQGra..33u5004U/abstract>_`, *CQG*, **33**, 215004 (2016).

.. [5] M. Pitkin, M. Isi, J. Veitch & G. Woan, `arXiv:1705.08978v1
    <https://arxiv.org/abs/1705.08978v1>`_ (2017).